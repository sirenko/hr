As HackerRank deprecated its API the reverse engineering problem of their current API arose.

* Reverse engineering HackerRank

** Download html page for the 2d-array problem

#+BEGIN_SRC http :pretty :file 2d-array-problem.html
GET https://www.hackerrank.com/challenges/2d-array/problem
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36
#+END_SRC

#+RESULTS:
[[file:2d-array-problem.html]]

After a through examination the block with =<script type="application/json" id="initialData">= with the problem's URL encoded source code (for all supported languages) was found.

The =initialData='s block starts on the line:

#+BEGIN_SRC shell :results output :exports both
grep -irn 'initialData' 2d-array-problem.html | cut -f1 -d' '
#+END_SRC

#+RESULTS:
: 1712:

Therefore URL encoded =initialData= can be extracted into the file with the command:

#+BEGIN_SRC shell :file 2d-array-problem.url.encoded
head -1713 2d-array-problem.html | tail -1
#+END_SRC

#+RESULTS:
[[file:2d-array-problem.url.encoded]]

The 2d-array-problem.url.encoded can be decoded into the .json with the command:

#+BEGIN_SRC shell  :file 2d-array-problem.json
cat 2d-array-problem.url.encoded | awk -niord '{printf RT?$0chr("0x"substr(RT,2)):$0}' RS=%.. | jq -r .
#+END_SRC

#+RESULTS:
[[file:2d-array-problem.json]]

The .json can be turned into the Go (golang) struct at [[https://mholt.github.io/json-to-go/]].
It was done. Saved struct is in the [[file:2d-array-problem.go]]

** Downloading the list of problems

#+BEGIN_SRC http :pretty
GET https://www.hackerrank.com/rest/contests/master/tracks/data-structures/challenges?offset=0&limit=1000
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36
#+END_SRC

#+RESULTS:
#+begin_example
{
  "models": [
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 10,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 10,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 322088,
      "solved_count": 302629,
      "success_ratio": 0.9395848339584213,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 134,
        "name": "Arrays",
        "slug": "arrays",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 13579,
      "slug": "arrays-ds",
      "name": "Arrays - DS",
      "status": null,
      "created_at": "2015-10-19T19:03:20.000Z",
      "updated_at": "2018-05-31T09:37:21.000Z",
      "kind": "code",
      "preview": "Accessing and using arrays.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Data Structures",
        "Arrays",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 15,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 15,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 245700,
      "solved_count": 222870,
      "success_ratio": 0.9070818070818071,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 134,
        "name": "Arrays",
        "slug": "arrays",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 13581,
      "slug": "2d-array",
      "name": "2D Array - DS",
      "status": null,
      "created_at": "2015-10-19T19:10:38.000Z",
      "updated_at": "2018-08-14T14:26:00.000Z",
      "kind": "code",
      "preview": "How to access and use 2d-arrays.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": "",
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Easy",
        "Data Structures",
        "Arrays",
        "problem-solving",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 15,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 15,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 60487,
      "solved_count": 50277,
      "success_ratio": 0.8312033990774877,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 134,
        "name": "Arrays",
        "slug": "arrays",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 13642,
      "slug": "dynamic-array",
      "name": "Dynamic Array",
      "status": null,
      "created_at": "2015-10-21T21:32:16.000Z",
      "updated_at": "2018-07-16T05:52:51.000Z",
      "kind": "code",
      "preview": "Learn to use dynamic arrays by solving this problem.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Data Structures",
        "Arrays",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 20,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 20,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 122075,
      "solved_count": 106381,
      "success_ratio": 0.8714396887159533,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 134,
        "name": "Arrays",
        "slug": "arrays",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 22538,
      "slug": "array-left-rotation",
      "name": "Left Rotation",
      "status": null,
      "created_at": "2016-06-29T17:36:24.000Z",
      "updated_at": "2018-05-11T08:07:26.000Z",
      "kind": "code",
      "preview": "Given an array and a number, d, perform d left rotations on the array.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Data Structures",
        "Arrays",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 25,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 25,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 115020,
      "solved_count": 111196,
      "success_ratio": 0.966753608068162,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 134,
        "name": "Arrays",
        "slug": "arrays",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 13724,
      "slug": "sparse-arrays",
      "name": "Sparse Arrays",
      "status": null,
      "created_at": "2015-10-23T23:43:43.000Z",
      "updated_at": "2018-07-06T21:06:23.000Z",
      "kind": "code",
      "preview": "Determine the number of times a string has previously appeared. ",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.7,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Medium",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Medium",
        "Data Structures",
        "Arrays",
        "problem-solving",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 60,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 60,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 111180,
      "solved_count": 56966,
      "success_ratio": 0.51237632667746,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 134,
        "name": "Arrays",
        "slug": "arrays",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 1636,
      "slug": "crush",
      "name": "Array Manipulation",
      "status": null,
      "created_at": "2014-01-09T11:29:47.000Z",
      "updated_at": "2018-09-26T09:15:11.000Z",
      "kind": "code",
      "preview": "Perform m operations on an array and print the maximum of the values.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.5048025613660619,
      "color": null,
      "solved_score": 1,
      "preview_format": null,
      "difficulty_name": "Hard",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Greedy Algorithms",
        "Hard",
        "problem-solving",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 5,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 5,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 178265,
      "solved_count": 172208,
      "success_ratio": 0.9660224946007349,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 39,
        "name": "Linked Lists",
        "slug": "linked-lists",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 1082,
      "slug": "print-the-elements-of-a-linked-list",
      "name": "Print the Elements of a Linked List",
      "status": null,
      "created_at": "2013-10-14T06:26:34.000Z",
      "updated_at": "2018-05-28T12:52:45.000Z",
      "kind": "code",
      "preview": "Get started with Linked Lists!",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9692106736331405,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Linked Lists",
        "Data Structures",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 5,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 5,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 139017,
      "solved_count": 132571,
      "success_ratio": 0.953631570239611,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 39,
        "name": "Linked Lists",
        "slug": "linked-lists",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 1087,
      "slug": "insert-a-node-at-the-tail-of-a-linked-list",
      "name": "Insert a Node at the Tail of a Linked List",
      "status": null,
      "created_at": "2013-10-16T13:07:49.000Z",
      "updated_at": "2018-10-09T11:28:17.000Z",
      "kind": "code",
      "preview": "Create and insert a new node at the tail of a linked list.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9846815372211771,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Linked Lists",
        "Data Structures",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 5,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 5,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 133060,
      "solved_count": 131122,
      "success_ratio": 0.9854351420411844,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 39,
        "name": "Linked Lists",
        "slug": "linked-lists",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 1085,
      "slug": "insert-a-node-at-the-head-of-a-linked-list",
      "name": "Insert a node at the head of a linked list",
      "status": null,
      "created_at": "2013-10-16T12:05:08.000Z",
      "updated_at": "2018-09-26T08:51:05.000Z",
      "kind": "code",
      "preview": "Create and insert a new node at the head of a linked list",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9867938371239912,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Linked Lists",
        "Data Structures",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 5,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 5,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 115524,
      "solved_count": 111106,
      "success_ratio": 0.9617568643745023,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 39,
        "name": "Linked Lists",
        "slug": "linked-lists",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 1088,
      "slug": "insert-a-node-at-a-specific-position-in-a-linked-list",
      "name": "Insert a node at a specific position in a linked list",
      "status": null,
      "created_at": "2013-10-16T14:29:13.000Z",
      "updated_at": "2018-07-02T15:00:18.000Z",
      "kind": "code",
      "preview": "Insert a node at a specific position in a linked list.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9808102345415778,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Linked Lists",
        "Easy",
        "Data Structures",
        "problem-solving",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 5,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 5,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 104753,
      "solved_count": 102082,
      "success_ratio": 0.9745019235725946,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 39,
        "name": "Linked Lists",
        "slug": "linked-lists",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 1112,
      "slug": "delete-a-node-from-a-linked-list",
      "name": "Delete a Node",
      "status": null,
      "created_at": "2013-10-19T08:22:02.000Z",
      "updated_at": "2018-05-22T13:20:12.000Z",
      "kind": "code",
      "preview": "Delete a node from the linked list and return the head.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9872489639783233,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Linked Lists",
        "Data Structures",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 5,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 5,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 104905,
      "solved_count": 102613,
      "success_ratio": 0.9781516610266432,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 39,
        "name": "Linked Lists",
        "slug": "linked-lists",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 1147,
      "slug": "print-the-elements-of-a-linked-list-in-reverse",
      "name": "Print in Reverse",
      "status": null,
      "created_at": "2013-10-22T14:09:33.000Z",
      "updated_at": "2018-05-22T13:24:52.000Z",
      "kind": "code",
      "preview": "Print the elements of a linked list in reverse order, from tail to head",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": "",
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9714188499489622,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Linked Lists",
        "Data Structures",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 5,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 5,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 97688,
      "solved_count": 95767,
      "success_ratio": 0.9803353533699124,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 39,
        "name": "Linked Lists",
        "slug": "linked-lists",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 1149,
      "slug": "reverse-a-linked-list",
      "name": "Reverse a linked list",
      "status": null,
      "created_at": "2013-10-22T20:01:30.000Z",
      "updated_at": "2018-05-28T12:49:44.000Z",
      "kind": "code",
      "preview": "Change the links between the nodes of a linked list to reverse it",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": "python3",
      "checker_program": "{\"custom_checker_head\":\"\\n# Start of HEAD\\nimport json\\nimport string\\nimport sys\\n# End of HEAD\\n        \",\"custom_checker_body\":\"\\n# Start of BODY\\n'''\\nTestStruct::\\ntestcase_id                   [int] ID of the test-case\\ntestcase_input_path           [str] File path to test-case input\\ntestcase_output_path          [str] File path to test-case output generated by the problem solver\\ntestcase_expected_output_path [str] File path to test-case expected output to be matched with\\nmetadata_file_paths           [list<str>] File paths to Question metadata (Extra files usually used for defining traning sets)\\nsubmission_code_path          [str] File path to submission source code\\ntestcase_result               [bool] Set to True if test-case output matches test-case expected output. Matching is done line by line\\ntestcase_signal               [int] Exit code of the test-case process\\ntestcase_time                 [float] Time taken by the test-case process in seconds\\ntestcase_memory               [int] Peak memory of the test-case process determined in bytes\\ndata                          [str] <Future use>\\nResultStruct::\\nresult      [bool]  Assign test-case result. True determines success. False determines failure\\nscore       [float] Assign test-case score. Normalized between 0 to 1\\nmessage     [str] Assign test-case message. This message is visible to the problem solver\\n'''\\n\\n\\ndef run_custom_checker(t_obj, r_obj):\\n    with open(t_obj.testcase_expected_output_path, 'rt') as f:\\n        expected_output = [x.strip().rstrip() for x in f.readlines() if x]\\n    \\n    with open(t_obj.testcase_output_path, 'rt') as f:\\n        candidate_output = [x.strip().rstrip() for x in f.readlines() if x]\\n    \\n    if candidate_output.count('Right Answer!') == len(expected_output):\\n        r_obj.message = 'Right Answer!'\\n        r_obj.result = True\\n        r_obj.score = 1.0\\n    else:\\n        r_obj.message = 'Wrong Answer!'\\n        r_obj.result = False\\n        r_obj.score = 0.0\",\"custom_checker_tail\":\"\\n# Start of TAIL\\nclass TestStruct:\\n    def __init__(self):\\n        self.testcase_id = 0\\n        self.testcase_input_path = \\\"\\\"\\n        self.testcase_output_path = \\\"\\\"\\n        self.testcase_expected_output_path = \\\"\\\"\\n        self.metadata_file_paths = []\\n        self.submission_code_path = \\\"\\\"\\n        self.testcase_result = False\\n        self.testcase_signal = 0\\n        self.testcase_time = 0.0\\n        self.testcase_memory = 0\\n        self.data = \\\"\\\"\\n\\n\\nclass ResultStruct:\\n    def __init__(self):\\n        self.result = False\\n        self.score = 0.0\\n        self.message = \\\"\\\"\\n\\n\\ndef read_input_json(json_file_path, t_obj):\\n    file_obj = open(json_file_path, \\\"r\\\")\\n    json_file_contents = file_obj.read()\\n\\n    root = {}\\n    try:\\n        root = json.loads(json_file_contents)\\n    except ValueError:\\n        return 1\\n\\n    try:\\n        # Read values\\n        t_obj.testcase_id = root[\\\"testcase_id\\\"]\\n        t_obj.testcase_input_path = root[\\\"input_file_path\\\"]\\n        t_obj.testcase_output_path = root[\\\"output_file_path\\\"]\\n        t_obj.testcase_expected_output_path = root[\\\"expected_output_file_path\\\"]\\n        t_obj.metadata_file_paths = root[\\\"metadata_file_paths\\\"]\\n        t_obj.submission_code_path = root[\\\"submission_code_path\\\"]\\n        t_obj.testcase_result = root[\\\"testcase_result\\\"]\\n        t_obj.testcase_signal = root[\\\"testcase_signal\\\"]\\n        t_obj.testcase_time = root[\\\"testcase_time\\\"]\\n        t_obj.testcase_memory = root[\\\"testcase_memory\\\"]\\n        t_obj.data = root[\\\"data\\\"]\\n    except KeyError:\\n        return 1\\n\\n    return 0\\n\\n\\ndef write_result_json(r_obj):\\n    root = {\\n        \\\"custom_result\\\" : int(r_obj.result),\\n        \\\"custom_score\\\"  : max((r_obj.score if (r_obj.score <= 1.0) else 1.0), 0),\\n        \\\"custom_message\\\": r_obj.message if (len(r_obj.message) <= 4096) else r_obj.message[0:4095]\\n    }\\n\\n    print(json.dumps(root))\\n\\n\\nif __name__ ==  \\\"__main__\\\":\\n    # Input parameters\\n    t_obj = TestStruct()\\n    # Result parameters\\n    r_obj = ResultStruct()\\n\\n    if len(sys.argv) < 2:\\n        write_result_json(r_obj)\\n        sys.exit(1)\\n\\n    # Decode input JSON\\n    failure = read_input_json(sys.argv[1], t_obj)\\n    # Incase input JSON was malformed or not existent\\n    if failure != 0:\\n        r_obj.message = \\\"Unable to read input json\\\";\\n        write_result_json(r_obj)\\n        sys.exit(2)\\n\\n    #Run the custom checker evaluator\\n    run_custom_checker(t_obj, r_obj)\\n\\n    # Encode result JSON\\n    write_result_json(r_obj)\\n    sys.exit(0)\\n# End of TAIL\\n        \"}",
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9778679454075987,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Linked Lists",
        "Data Structures",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 5,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 5,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 90095,
      "solved_count": 89116,
      "success_ratio": 0.9891336922137743,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 39,
        "name": "Linked Lists",
        "slug": "linked-lists",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 1150,
      "slug": "compare-two-linked-lists",
      "name": "Compare two linked lists",
      "status": null,
      "created_at": "2013-10-23T07:16:01.000Z",
      "updated_at": "2018-05-30T12:33:22.000Z",
      "kind": "code",
      "preview": "Compare the data in two linked lists node by node to see if the lists contain identical data.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.987905604719764,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Linked Lists",
        "Data Structures",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 5,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 5,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 72786,
      "solved_count": 69690,
      "success_ratio": 0.9574643475393619,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 39,
        "name": "Linked Lists",
        "slug": "linked-lists",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 1155,
      "slug": "merge-two-sorted-linked-lists",
      "name": "Merge two sorted linked lists",
      "status": null,
      "created_at": "2013-10-23T10:05:11.000Z",
      "updated_at": "2018-05-30T11:35:49.000Z",
      "kind": "code",
      "preview": "Given the heads of two sorted linked lists, change their links to get a single, sorted linked list.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9782713664896185,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Linked Lists",
        "Data Structures",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 5,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 5,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 73645,
      "solved_count": 72842,
      "success_ratio": 0.9890963405526513,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 39,
        "name": "Linked Lists",
        "slug": "linked-lists",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 1156,
      "slug": "get-the-value-of-the-node-at-a-specific-position-from-the-tail",
      "name": "Get Node Value",
      "status": null,
      "created_at": "2013-10-23T11:28:37.000Z",
      "updated_at": "2018-05-28T12:54:14.000Z",
      "kind": "code",
      "preview": "Given the head of a linked list, get the value of the node at a given position when counting backwards from the tail.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9859922178988327,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Linked Lists",
        "Data Structures",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 5,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 5,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 67967,
      "solved_count": 66925,
      "success_ratio": 0.9846690305589477,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 39,
        "name": "Linked Lists",
        "slug": "linked-lists",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 1157,
      "slug": "delete-duplicate-value-nodes-from-a-sorted-linked-list",
      "name": "Delete duplicate-value nodes from a sorted linked list",
      "status": null,
      "created_at": "2013-10-23T12:11:51.000Z",
      "updated_at": "2018-05-28T12:55:49.000Z",
      "kind": "code",
      "preview": "Given a linked list whose nodes have data in ascending order, delete some nodes so that no value occurs more than once.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9876753081172971,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Linked Lists",
        "Data Structures",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 5,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 5,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 74283,
      "solved_count": 69736,
      "success_ratio": 0.9387881480284856,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 39,
        "name": "Linked Lists",
        "slug": "linked-lists",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 1163,
      "slug": "detect-whether-a-linked-list-contains-a-cycle",
      "name": "Cycle Detection",
      "status": null,
      "created_at": "2013-10-24T09:48:32.000Z",
      "updated_at": "2018-10-23T08:23:22.000Z",
      "kind": "code",
      "preview": "Given a pointer to the head of a linked list, determine whether the linked list loops back onto itself",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.7,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Medium",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Linked Lists",
        "Data Structures",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 5,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 5,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 56982,
      "solved_count": 54400,
      "success_ratio": 0.9546874451581201,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 39,
        "name": "Linked Lists",
        "slug": "linked-lists",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 1167,
      "slug": "find-the-merge-point-of-two-joined-linked-lists",
      "name": "Find Merge Point of Two Lists",
      "status": null,
      "created_at": "2013-10-24T18:27:11.000Z",
      "updated_at": "2019-02-04T14:32:03.000Z",
      "kind": "code",
      "preview": "Given two linked lists, find the node where they merge into one.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9809310151430174,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Linked Lists",
        "Easy",
        "Data Structures",
        "problem-solving",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 5,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 5,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 47258,
      "solved_count": 44209,
      "success_ratio": 0.9354818231833764,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 39,
        "name": "Linked Lists",
        "slug": "linked-lists",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 1168,
      "slug": "insert-a-node-into-a-sorted-doubly-linked-list",
      "name": "Inserting a Node Into a Sorted Doubly Linked List",
      "status": null,
      "created_at": "2013-10-24T18:41:29.000Z",
      "updated_at": "2018-07-02T14:56:33.000Z",
      "kind": "code",
      "preview": "Create a node with a given value and insert it into a sorted doubly-linked list",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9522776572668112,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Linked Lists",
        "Easy",
        "Data Structures",
        "problem-solving",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 5,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 5,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 48731,
      "solved_count": 47567,
      "success_ratio": 0.9761137674170446,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 39,
        "name": "Linked Lists",
        "slug": "linked-lists",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 1169,
      "slug": "reverse-a-doubly-linked-list",
      "name": "Reverse a doubly linked list",
      "status": null,
      "created_at": "2013-10-24T18:53:52.000Z",
      "updated_at": "2018-07-02T15:03:19.000Z",
      "kind": "code",
      "preview": "Given the head node of a doubly linked list, reverse it.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9731081926203877,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Linked Lists",
        "Easy",
        "Data Structures",
        "problem-solving",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 10,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 10,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 117361,
      "solved_count": 115442,
      "success_ratio": 0.9836487419159686,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 96,
        "name": "Trees",
        "slug": "trees",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 8131,
      "slug": "tree-preorder-traversal",
      "name": "Tree: Preorder Traversal",
      "status": null,
      "created_at": "2015-05-04T22:52:03.000Z",
      "updated_at": "2018-06-22T11:26:00.000Z",
      "kind": "code",
      "preview": "Print the preorder traversal of a binary tree.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Trees",
        "Algorithms",
        "Data Structures",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 10,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 10,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 107907,
      "solved_count": 107380,
      "success_ratio": 0.9951161648456541,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 96,
        "name": "Trees",
        "slug": "trees",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 8133,
      "slug": "tree-postorder-traversal",
      "name": "Tree: Postorder Traversal",
      "status": null,
      "created_at": "2015-05-04T23:20:06.000Z",
      "updated_at": "2018-06-22T11:26:02.000Z",
      "kind": "code",
      "preview": "Print the post order traversal of a binary tree.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Trees",
        "Algorithms",
        "Data Structures",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 10,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 10,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 105677,
      "solved_count": 105247,
      "success_ratio": 0.9959309972841772,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 96,
        "name": "Trees",
        "slug": "trees",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 8132,
      "slug": "tree-inorder-traversal",
      "name": "Tree: Inorder Traversal",
      "status": null,
      "created_at": "2015-05-04T23:06:35.000Z",
      "updated_at": "2018-06-22T11:26:04.000Z",
      "kind": "code",
      "preview": "Print the inorder traversal of a binary tree.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Trees",
        "Algorithms",
        "Data Structures",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 10,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 10,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 106986,
      "solved_count": 103101,
      "success_ratio": 0.9636868375301442,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 96,
        "name": "Trees",
        "slug": "trees",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 8793,
      "slug": "tree-height-of-a-binary-tree",
      "name": "Tree: Height of a Binary Tree",
      "status": null,
      "created_at": "2015-06-17T03:49:28.000Z",
      "updated_at": "2018-06-25T20:22:18.000Z",
      "kind": "code",
      "preview": "Given a binary tree, print its height.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Trees",
        "Algorithms",
        "Easy",
        "Data Structures",
        "problem-solving",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 20,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 20,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 71114,
      "solved_count": 53718,
      "success_ratio": 0.7553786877408105,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 96,
        "name": "Trees",
        "slug": "trees",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 8796,
      "slug": "tree-top-view",
      "name": "Tree : Top View",
      "status": null,
      "created_at": "2015-06-17T04:50:48.000Z",
      "updated_at": "2018-06-26T09:46:25.000Z",
      "kind": "code",
      "preview": "Given a binary tree, print it's top view.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Trees",
        "Algorithms",
        "Data Structures",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 20,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 20,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 66369,
      "solved_count": 63876,
      "success_ratio": 0.9624372824662116,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 96,
        "name": "Trees",
        "slug": "trees",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 8794,
      "slug": "tree-level-order-traversal",
      "name": "Tree: Level Order Traversal",
      "status": null,
      "created_at": "2015-06-17T04:01:12.000Z",
      "updated_at": "2018-06-22T11:26:13.000Z",
      "kind": "code",
      "preview": "Level order traversal of a binary tree.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Trees",
        "Algorithms",
        "Data Structures",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 20,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 20,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 65562,
      "solved_count": 62322,
      "success_ratio": 0.9505811293127117,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 96,
        "name": "Trees",
        "slug": "trees",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 8829,
      "slug": "binary-search-tree-insertion",
      "name": "Binary Search Tree : Insertion",
      "status": null,
      "created_at": "2015-06-19T04:24:19.000Z",
      "updated_at": "2018-06-22T11:26:14.000Z",
      "kind": "code",
      "preview": "Given a number, insert it into it's position in a binary search tree.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Trees",
        "Algorithms",
        "Data Structures",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 20,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 20,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 42801,
      "solved_count": 41764,
      "success_ratio": 0.9757715941216327,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 96,
        "name": "Trees",
        "slug": "trees",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 8795,
      "slug": "tree-huffman-decoding",
      "name": "Tree: Huffman Decoding ",
      "status": null,
      "created_at": "2015-06-17T04:27:54.000Z",
      "updated_at": "2018-06-25T21:14:00.000Z",
      "kind": "code",
      "preview": "Given a Huffman tree and an encoded binary string, you have to print the original string.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.7,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Medium",
      "hints": [],
      "tag_names": [
        "Trees",
        "Algorithms",
        "Medium",
        "Data Structures",
        "problem-solving",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 30,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 30,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 61686,
      "solved_count": 56716,
      "success_ratio": 0.9194306649807088,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 96,
        "name": "Trees",
        "slug": "trees",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 8831,
      "slug": "binary-search-tree-lowest-common-ancestor",
      "name": "Binary Search Tree : Lowest Common Ancestor",
      "status": null,
      "created_at": "2015-06-19T05:27:58.000Z",
      "updated_at": "2018-07-10T14:54:27.000Z",
      "kind": "code",
      "preview": "Given two nodes of a binary search tree, find the lowest common ancestor of these two nodes.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Trees",
        "Algorithms",
        "Easy",
        "Data Structures",
        "problem-solving",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 40,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 40,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 17182,
      "solved_count": 15048,
      "success_ratio": 0.8758002560819462,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 96,
        "name": "Trees",
        "slug": "trees",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 6375,
      "slug": "swap-nodes-algo",
      "name": "Swap Nodes [Algo]",
      "status": null,
      "created_at": "2015-02-10T06:19:11.000Z",
      "updated_at": "2018-07-12T18:27:19.000Z",
      "kind": "code",
      "preview": "Given a tree and an integer, K, we have to swap the subtrees of all the nodes which are at a depth h",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.7,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Medium",
      "hints": [],
      "tag_names": [
        "Trees",
        "Algorithms",
        "Medium",
        "Data Structures",
        "problem-solving",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 80,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 80,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 1631,
      "solved_count": 226,
      "success_ratio": 0.13856529736358061,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 96,
        "name": "Trees",
        "slug": "trees",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 29033,
      "slug": "kittys-calculations-on-a-tree",
      "name": "Kitty's Calculations on a Tree",
      "status": null,
      "created_at": "2016-11-28T17:48:58.000Z",
      "updated_at": "2016-12-03T17:51:49.000Z",
      "kind": "code",
      "preview": "Given some queries, calculate an expression.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.3,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Advanced",
      "hints": [],
      "tag_names": [
        "Trees",
        "Algorithms",
        "Data Structures",
        "Memoization and Dynamic Programming",
        "Hard",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 30,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 30,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 39054,
      "solved_count": 29537,
      "success_ratio": 0.7563117734419009,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 96,
        "name": "Trees",
        "slug": "trees",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 22541,
      "slug": "is-binary-search-tree",
      "name": "Is This a Binary Search Tree?",
      "status": null,
      "created_at": "2016-06-29T21:12:11.000Z",
      "updated_at": "2017-06-02T06:34:21.000Z",
      "kind": "code",
      "preview": "Given the root of a binary tree, you have to tell if it's a binary search tree.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.6,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Medium",
      "hints": [],
      "tag_names": [
        "Trees",
        "Algorithms",
        "Data Structures",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 60,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 60,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 1031,
      "solved_count": 530,
      "success_ratio": 0.5140640155189137,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 96,
        "name": "Trees",
        "slug": "trees",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 13850,
      "slug": "square-ten-tree",
      "name": "Square-Ten Tree",
      "status": null,
      "created_at": "2015-10-27T19:37:53.000Z",
      "updated_at": "2017-07-11T15:50:58.000Z",
      "kind": "code",
      "preview": "Square-ten tree",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.5,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Hard",
      "hints": [],
      "tag_names": [
        "Trees",
        "Algorithms",
        "Data Structures",
        "ad-hoc",
        "big integers",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 60,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 60,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 1201,
      "solved_count": 497,
      "success_ratio": 0.4138218151540383,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 96,
        "name": "Trees",
        "slug": "trees",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 22258,
      "slug": "balanced-forest",
      "name": "Balanced Forest",
      "status": null,
      "created_at": "2016-06-16T18:57:26.000Z",
      "updated_at": "2018-07-10T15:03:47.000Z",
      "kind": "code",
      "preview": " Determine the minimum number of coins to add to a tree such that it can be cut into three trees having an equal number of coins.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.5,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Hard",
      "hints": [],
      "tag_names": [
        "Trees",
        "Algorithms",
        "Data Structures",
        "Hard",
        "problem-solving",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 70,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 70,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 355,
      "solved_count": 136,
      "success_ratio": 0.38309859154929576,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 96,
        "name": "Trees",
        "slug": "trees",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 18364,
      "slug": "jenny-subtrees",
      "name": "Jenny's Subtrees",
      "status": null,
      "created_at": "2016-03-03T13:38:46.000Z",
      "updated_at": "2018-03-25T07:48:15.000Z",
      "kind": "code",
      "preview": "Given a tree, find the number of distinct subtrees having a specific radius that can be cut from it.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.5,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Hard",
      "hints": [],
      "tag_names": [
        "Trees",
        "Algorithms",
        "Data Structures",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 100,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 100,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 219,
      "solved_count": 79,
      "success_ratio": 0.3607305936073059,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 96,
        "name": "Trees",
        "slug": "trees",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 20906,
      "slug": "tree-coordinates",
      "name": "Tree Coordinates",
      "status": null,
      "created_at": "2016-04-22T09:23:06.000Z",
      "updated_at": "2018-03-25T10:30:50.000Z",
      "kind": "code",
      "preview": "Find the maximum distance between two points in \"tree-space\"!",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.1,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Expert",
      "hints": [],
      "tag_names": [
        "Trees",
        "Algorithms",
        "Data Structures",
        "Expert",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 100,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 100,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 2768,
      "solved_count": 182,
      "success_ratio": 0.0657514450867052,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 96,
        "name": "Trees",
        "slug": "trees",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 21128,
      "slug": "array-pairs",
      "name": "Array Pairs",
      "status": null,
      "created_at": "2016-05-01T07:54:13.000Z",
      "updated_at": "2018-05-23T08:25:31.000Z",
      "kind": "code",
      "preview": "Count the number of pairs satisfying a condition.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": false,
      "can_solve": true,
      "company": null,
      "difficulty": 0.3,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Advanced",
      "hints": [],
      "tag_names": [
        "RangeQuery"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 50,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 50,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 6790,
      "solved_count": 5000,
      "success_ratio": 0.7363770250368189,
      "is_editorial_available": false,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 119,
        "name": "Balanced Trees",
        "slug": "balanced-trees",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 9191,
      "slug": "self-balancing-tree",
      "name": "Self Balancing Tree",
      "status": null,
      "created_at": "2015-07-14T06:26:11.000Z",
      "updated_at": "2017-02-15T09:36:40.000Z",
      "kind": "code",
      "preview": "Insert values in a self balancing binary search tree.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.7,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Medium",
      "hints": [],
      "tag_names": [
        "Trees",
        "Algorithms",
        "Data Structures",
        "avl",
        "binary search tree",
        "Core CS",
        "Balanced Trees"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 80,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 80,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 3846,
      "solved_count": 754,
      "success_ratio": 0.19604784191367655,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 119,
        "name": "Balanced Trees",
        "slug": "balanced-trees",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 8949,
      "slug": "array-and-simple-queries",
      "name": "Array and simple queries",
      "status": null,
      "created_at": "2015-06-25T10:35:01.000Z",
      "updated_at": "2017-07-11T15:50:01.000Z",
      "kind": "code",
      "preview": "Given an array, remove a range from it and add it to either the front or the back and answer the given queries.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.5,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Hard",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Data Structures",
        "Core CS",
        "Balanced Trees"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 70,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 70,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 7793,
      "solved_count": 3443,
      "success_ratio": 0.4418067496471192,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [
        {
          "title": "Multi-set",
          "slug": "multi-set"
        }
      ],
      "user_score": 0,
      "track": {
        "id": 119,
        "name": "Balanced Trees",
        "slug": "balanced-trees",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 104,
      "slug": "median",
      "name": "Median Updates",
      "status": null,
      "created_at": "2013-01-04T20:28:56.000Z",
      "updated_at": "2017-07-11T15:41:39.000Z",
      "kind": "code",
      "preview": "Return the median after each number is added to a list.",
      "category": "algorithm",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.418013856812933,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Hard",
      "hints": [],
      "tag_names": [
        "Search",
        "Trees",
        "Algorithms",
        "Data Structures",
        "Core CS",
        "Balanced Trees"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 50,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 50,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 6702,
      "solved_count": 4861,
      "success_ratio": 0.7253058788421367,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 100,
        "name": "Disjoint Set",
        "slug": "disjoint-set",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 8223,
      "slug": "merging-communities",
      "name": "Merging Communities ",
      "status": null,
      "created_at": "2015-05-11T17:08:34.000Z",
      "updated_at": "2017-07-11T15:49:00.000Z",
      "kind": "code",
      "preview": "Given N groups, answer two types of queries: merge two groups or print the group to which a person belongs to.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.5,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Hard",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Data Structures",
        "Disjoint Set",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 25,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 25,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 16063,
      "solved_count": 11033,
      "success_ratio": 0.686857996638237,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 99,
        "name": "Heap",
        "slug": "heap",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 15379,
      "slug": "qheap1",
      "name": "QHEAP1",
      "status": null,
      "created_at": "2015-12-15T10:21:58.000Z",
      "updated_at": "2017-07-11T15:51:29.000Z",
      "kind": "code",
      "preview": "Solve the basic heap question with insertion and deletion.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Data Structures",
        "Min Heap",
        "Heaps",
        "Core CS",
        "Heap"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 20,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 20,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 60049,
      "solved_count": 42107,
      "success_ratio": 0.7012106779463438,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 97,
        "name": "Stacks",
        "slug": "stacks",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 14717,
      "slug": "maximum-element",
      "name": "Maximum Element",
      "status": null,
      "created_at": "2015-11-24T11:51:21.000Z",
      "updated_at": "2017-07-11T15:51:06.000Z",
      "kind": "code",
      "preview": "Given three types of queries, insert an element, delete an element or find the maximum element in a stack.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Data Structures",
        "stack",
        "Stacks",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 30,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 30,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 23373,
      "solved_count": 20606,
      "success_ratio": 0.88161553929748,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 98,
        "name": "Queues",
        "slug": "queues",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 23151,
      "slug": "queue-using-two-stacks",
      "name": "Queue using Two Stacks",
      "status": null,
      "created_at": "2016-07-22T09:55:13.000Z",
      "updated_at": "2017-07-11T15:53:39.000Z",
      "kind": "code",
      "preview": "Create a queue data structure using two stacks.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.6,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Medium",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Data Structures",
        "Queues",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 50,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 50,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 6256,
      "solved_count": 5181,
      "success_ratio": 0.8281649616368286,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 100,
        "name": "Disjoint Set",
        "slug": "disjoint-set",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 8947,
      "slug": "components-in-graph",
      "name": "Components in a graph",
      "status": null,
      "created_at": "2015-06-25T10:07:04.000Z",
      "updated_at": "2018-03-28T03:45:22.000Z",
      "kind": "code",
      "preview": "Given a graph, print the maximum and the minimum number of vertices in it's connected components.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.7,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Medium",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Data Structures",
        "Disjoint Set",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 25,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 25,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 66534,
      "solved_count": 55464,
      "success_ratio": 0.8336189016142123,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 97,
        "name": "Stacks",
        "slug": "stacks",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 15095,
      "slug": "balanced-brackets",
      "name": "Balanced Brackets",
      "status": null,
      "created_at": "2015-12-03T23:39:18.000Z",
      "updated_at": "2018-06-20T20:43:28.000Z",
      "kind": "code",
      "preview": "Given a string containing three types of brackets, determine if it is balanced.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.7,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Medium",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Medium",
        "Data Structures",
        "stack",
        "Stacks",
        "problem-solving",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 25,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 25,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 15774,
      "solved_count": 11042,
      "success_ratio": 0.700012679092177,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 99,
        "name": "Heap",
        "slug": "heap",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 16183,
      "slug": "jesse-and-cookies",
      "name": "Jesse and Cookies",
      "status": null,
      "created_at": "2016-01-19T10:23:56.000Z",
      "updated_at": "2018-03-29T23:29:41.000Z",
      "kind": "code",
      "preview": "Calculate the number of operations needed to increase the sweetness of the cookies so that each cookie in the collection has a sweetness >=K.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.9,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Easy",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Data Structures",
        "Core CS",
        "Heap"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 30,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 30,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 6030,
      "solved_count": 4264,
      "success_ratio": 0.7071310116086236,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 98,
        "name": "Queues",
        "slug": "queues",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 14856,
      "slug": "castle-on-the-grid",
      "name": "Castle on the Grid",
      "status": null,
      "created_at": "2015-11-28T18:50:06.000Z",
      "updated_at": "2018-06-25T10:10:12.000Z",
      "kind": "code",
      "preview": "Determine the number of steps to move a castle to the goal position on a given grid.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.7,
      "color": null,
      "solved_score": 0.5,
      "preview_format": null,
      "difficulty_name": "Medium",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Medium",
        "Data Structures",
        "#queue",
        "Queues",
        "problem-solving",
        "Core CS"
      ]
    },
    {
      "can_be_viewed": true,
      "dynamic": false,
      "has_started": true,
      "has_ended": false,
      "countdown_time": 0,
      "requirements_description": null,
      "max_score": 80,
      "active": true,
      "epoch_starttime": null,
      "epoch_endtime": null,
      "time_left": null,
      "factor": 80,
      "expert_solution_status": false,
      "custom_tabs": null,
      "total_count": 1620,
      "solved_count": 1130,
      "success_ratio": 0.6975308641975309,
      "is_editorial_available": true,
      "is_solution_unlocked": false,
      "contest_slug": "master",
      "topics": [],
      "user_score": 0,
      "track": {
        "id": 100,
        "name": "Disjoint Set",
        "slug": "disjoint-set",
        "track_id": 17,
        "track_name": "Data Structures",
        "track_slug": "data-structures"
      },
      "id": 2557,
      "slug": "kundu-and-tree",
      "name": "Kundu and Tree",
      "status": null,
      "created_at": "2014-05-28T05:49:51.000Z",
      "updated_at": "2018-05-17T13:26:38.000Z",
      "kind": "code",
      "preview": "Find the number of triplets (a,b,c) such that atleast one edge is colored red on all the three paths.",
      "category": "ai",
      "deleted": false,
      "company_id": null,
      "is_custom": false,
      "player_count": 2,
      "custom_checker_language": null,
      "checker_program": null,
      "judgebot_language": null,
      "judgebot": null,
      "onboarding": null,
      "compile_and_test": true,
      "is_text": false,
      "custom": false,
      "custom_case": true,
      "submit_disabled": false,
      "public_test_cases": true,
      "public_solutions": true,
      "can_solve": true,
      "company": null,
      "difficulty": 0.4658385093167702,
      "color": null,
      "solved_score": 1,
      "preview_format": null,
      "difficulty_name": "Hard",
      "hints": [],
      "tag_names": [
        "Algorithms",
        "Data Structures",
        "Disjoint Set",
        "Core CS"
      ]
    }
  ],
  "first_unsolved_challenge": null,
  "total": 121,
  "tutorial_signed_up": true,
  "current_track": {
    "id": 17,
    "name": "Data Structures",
    "slug": "data-structures",
    "priority": 13,
    "descriptions": "Data Structures help in elegant representation of data for algorithms",
    "rewards_system_enabled": null
  },
  "promo": {
    "meta": null,
    "type": "other"
  }
}
#+end_example
